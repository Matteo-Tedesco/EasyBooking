extends layout

block contentReservation
    div(style="text-align: center")
        h1 Effettua una prenotazione

        each dep in deps.rows
                h3 #{dep.key}
                //- Raccoglie gli orari del dipartimento corrente
                - var curr_wd_arr = []
                each wd in wds.rows
                    if wd.key == dep.key
                        - curr_wd_arr.push(wd)
                //- Raccoglie gli spazi del dipartimento corrente
                - var curr_sp_arr = []
                each sp in sps.rows
                    if sp.value.dep_name == dep.key
                        - curr_sp_arr.push(sp)
                //- Raccoglie i posti del dipartimento corrente
                - var curr_st_arr = []
                each st in sts.rows
                    if st.key == dep.key
                        - curr_st_arr.push(st)
                //- Raccoglie le prenotazioni del dipartimento corrente
                - var curr_reserv_arr = []
                each reserv in reservs.rows
                    if reserv.key == dep.key
                        - curr_reserv_arr.push(reserv)
                //- //- Raccoglie gli id dei posti delle prenotazioni dell'utete corrente e gli orari gia prenotati
                //- - var reserved_seats_ids = []
                //- - var reserved_seats_wd = []
                //- each reserv in reservs.rows
                //-     if reserv.value.email == SESSION EMAIL
                //-         - reserved_seats_ids.push([reserv.value.seat_id])
                //-         - reserved_seats_wd.push([String(reserv.value.start_date.Y)+String(reserv.value.start_date.M)+String(reserv.value.start_date.D)+String(reserv.value.start_date.h)+String(reserv.value.start_date.m)+String(reserv.value.start_date.s)])

                //- La data di oggi
                - const today = new Date()
                //- Array per l'inserimento dei giorni in italiano nella tabella
                - var it_days = ["Domenica", "Lunedì", "Martedì", "Mercoledì", "Giovedì", "Venerdì", "Sabato", "Domenica", "Lunedì", "Martedì", "Mercoledì", "Giovedì", "Venerdì", "Sabato"]
                //- Dizionario per inizializzare i dati da inserire nelle righe della tabella
                - var days = {"Lunedì": ["Chiuso", 24, 0], "Martedì": ["Chiuso", 24, 0], "Mercoledì": ["Chiuso", 24, 0], "Giovedì": ["Chiuso", 24, 0], "Venerdì": ["Chiuso", 24, 0], "Sabato": ["Chiuso", 24, 0], "Domenica": ["Chiuso", 24, 0]}
                //- Insericse i dati del dipartimento corrente in days e inizializza il minimo orario di apertura ed il massimo orario di chiusura della settimana
                - var min_ap = 24
                - var max_ch = 0
                each wd in curr_wd_arr
                    if (wd.value.state == "Aperto")
                        - days[wd.value.day] = [wd.value.state, wd.value.apertura.h, wd.value.chiusura.h]
                        - min_ap = (min_ap > wd.value.apertura.h)? wd.value.apertura.h : min_ap
                        - max_ch = (max_ch < wd.value.chiusura.h)? wd.value.chiusura.h : max_ch

                each sp in curr_sp_arr
                    h3 #{sp.value.typology} - #{sp.key}

                    //- Raccoglie i posti dello spazio corrente
                    - var curr_sp_st_arr = []
                    each st in curr_st_arr
                        if st.value.space_name == sp.key && st.value.typology == sp.value.typology
                            - curr_sp_st_arr.push(st)

                    table(width="100%", style="margin: 5px")
                        //- Prima riga che mostra il giorno della settimana e la data nel formato 'giorno-mese-anno'
                        tr
                            td(style="padding: 2px; text-align: center")
                                h4 Orari
                            td(style="padding: 2px; text-align: center")
                                h4 #{it_days[(today.getDay()+0)]} #{String(new Date(new Date().setDate(today.getDate()+0)).getDate())+"/"+String(new Date(new Date().setDate(today.getDate()+0)).getMonth()+1)+"/"+String(new Date(new Date().setDate(today.getDate()+0)).getFullYear())}
                            td(style="padding: 2px; text-align: center")
                                h4 #{it_days[(today.getDay()+1)]} #{String(new Date(new Date().setDate(today.getDate()+1)).getDate())+"/"+String(new Date(new Date().setDate(today.getDate()+1)).getMonth()+1)+"/"+String(new Date(new Date().setDate(today.getDate()+1)).getFullYear())}
                            td(style="padding: 2px; text-align: center")
                                h4 #{it_days[(today.getDay()+2)]} #{String(new Date(new Date().setDate(today.getDate()+2)).getDate())+"/"+String(new Date(new Date().setDate(today.getDate()+2)).getMonth()+1)+"/"+String(new Date(new Date().setDate(today.getDate()+2)).getFullYear())}
                            td(style="padding: 2px; text-align: center")
                                h4 #{it_days[(today.getDay()+3)]} #{String(new Date(new Date().setDate(today.getDate()+3)).getDate())+"/"+String(new Date(new Date().setDate(today.getDate()+3)).getMonth()+1)+"/"+String(new Date(new Date().setDate(today.getDate()+3)).getFullYear())}
                            td(style="padding: 2px; text-align: center")
                                h4 #{it_days[(today.getDay()+4)]} #{String(new Date(new Date().setDate(today.getDate()+4)).getDate())+"/"+String(new Date(new Date().setDate(today.getDate()+4)).getMonth()+1)+"/"+String(new Date(new Date().setDate(today.getDate()+4)).getFullYear())}
                            td(style="padding: 2px; text-align: center")
                                h4 #{it_days[(today.getDay()+5)]} #{String(new Date(new Date().setDate(today.getDate()+5)).getDate())+"/"+String(new Date(new Date().setDate(today.getDate()+5)).getMonth()+1)+"/"+String(new Date(new Date().setDate(today.getDate()+5)).getFullYear())}
                            td(style="padding: 2px; text-align: center")
                                h4 #{it_days[(today.getDay()+6)]} #{String(new Date(new Date().setDate(today.getDate()+6)).getDate())+"/"+String(new Date(new Date().setDate(today.getDate()+6)).getMonth()+1)+"/"+String(new Date(new Date().setDate(today.getDate()+6)).getFullYear())}

                        //- Corpo delle righe che mostra gli orari e le check per prenotare
                        //- Per ogni ora tra l'apertura minima e la chiusura massima
                        - var h = 0
                        while h < max_ch-min_ap
                            tr
                                - var reserved_seats = [0, 0, 0, 0, 0, 0, 0] //- Array per tenere memoria se il posto è prenotato dall'utente corrente o meno
                                - var reserved_wd =    [0, 0, 0, 0, 0, 0, 0] //- Array per tenere memoria se l'orario è prenotato dall'utente corrente o meno
                                - var free_seats_day = [0, 0, 0, 0, 0, 0, 0] //- Array per tenere memoria del numero di posti liberi per ogni giorno
                                - var row_seat_ids =   [0, 0, 0, 0, 0, 0, 0] //- Array per tenere memoria dell'id da prenotare nelle celle selezionate

                                //- Inizializza le variabili sopra riportate per il completamento della tabella
                                each st in curr_sp_st_arr

                                    - const today_YMD_str       = String((today.getFullYear()))+((String((today.getMonth()+1)).length == 1)? "0"+String((today.getMonth()+1)):String((today.getMonth()+1)))+((String((today.getDate())).length == 1)? "0"+String((today.getDate())):String((today.getDate())))
                                    - const today_YMDh_str      = String((today.getFullYear()))+((String((today.getMonth()+1)).length == 1)? "0"+String((today.getMonth()+1)):String((today.getMonth()+1)))+((String((today.getDate())).length == 1)? "0"+String((today.getDate())):String((today.getDate())))+((String((today.getHours()+2)).length == 1)? "0"+String((today.getHours()+2)):String((today.getHours()+2)))
                                    - var   start_date_YMD_str  = String(st.value.start_date.Y)+((String(st.value.start_date.M).length == 1)? '0'+String(st.value.start_date.M):String(st.value.start_date.M))+((String(st.value.start_date.D).length == 1)? '0'+String(st.value.start_date.D):String(st.value.start_date.D))
                                    - var   start_date_YMDh_str = String(st.value.start_date.Y)+((String(st.value.start_date.M).length == 1)? '0'+String(st.value.start_date.M):String(st.value.start_date.M))+((String(st.value.start_date.D).length == 1)? '0'+String(st.value.start_date.D):String(st.value.start_date.D))+((String(st.value.start_date.h).length == 1)? "0"+String(st.value.start_date.h):String(st.value.start_date.h))

                                    //- Controlla se il posto ha un data e un tempo precedenti a quelli odierni e quindi è da aggiornare
                                    if (start_date_YMDh_str <= today_YMDh_str)
                                        //- inizializza seat_res
                                        - var seat_res = []
                                        each reserv in reservs.rows
                                            if reserv.value.seat_id == st.id
                                                - seat_res.push(reserv)

                                        //- Se la data del posto è di oggi ma l'orario è passato basta mettere expired nello stato dello spazio e delle sue prenotazioni
                                        if (start_date_YMD_str == today_YMD_str)
                                            - st.value.state = "Expired"
                                            //- each exp_res in seat_res
                                            //-     MODIFICA DA COUCHDB LA PRENOTAZIONE
                                        //- Se invece non è di oggi ma di un giorno precedente
                                        else
                                            //- Aggiorna il nuovo posto con giorno corretto della settimana
                                            //- st.update(position: 1, start_date: st.start_date+(604800), end_date: st.end_date+(604800), state: "Active")

                                            //- //- Elimina le eventuali prenotazioni di quel posto
                                            //- each old_res in seat_res
                                            //-     ELIMINA DA COUCHDB LA PRENOTAZIONE

                                    - var day_num = 0
                                    - var d = 0
                                    while d < 7
                                        - const today_plus_d = new Date((new Date()).setDate(today.getDate()+d))
                                        - const today_plus_d_str = String(today_plus_d.getFullYear())+((String(today_plus_d.getMonth()+1).length == 1)? "0"+String(today_plus_d.getMonth()+1):String(today_plus_d.getMonth()+1))+((String(today_plus_d.getDate()).length == 1)? "0"+String(today_plus_d.getDate()):String(today_plus_d.getDate()))
                                        if start_date_YMD_str == today_plus_d_str
                                            - day_num = d
                                            - break
                                        - d ++

                                    //- Inizializzazione
                                    if (st.value.start_date.h == min_ap+h) && (start_date_YMD_str == String((new Date((new Date()).setDate(today.getDate()+d))).getFullYear())+((String((new Date((new Date()).setDate(today.getDate()+day_num))).getMonth()+1).length == 1)? "0"+String((new Date((new Date()).setDate(today.getDate()+day_num))).getMonth()+1):String((new Date((new Date()).setDate(today.getDate()+day_num))).getMonth()+1))+((String((new Date((new Date()).setDate(today.getDate()+day_num))).getDate()).length == 1)? "0"+String((new Date((new Date()).setDate(today.getDate()+day_num))).getDate()):String((new Date((new Date()).setDate(today.getDate()+day_num))).getDate())))
                                        if (st.value.state == "Expired") && (day_num == 0)
                                            - row_seat_ids[day_num] = -1
                                        else
                                            //- if (reserved_seats_wd.includes([start_date_YMDh_str]))
                                            if (false)
                                                - reserved_wd[day_num] = 1
                                            //- if (reserved_seats_ids.includes([st.id]))
                                            if (false)
                                                - reserved_seats[day_num] = 1
                                            else
                                                - free_seats_day[day_num] = sp.value.number_of_seats - st.value.position + 1
                                                - row_seat_ids[day_num] = st.id

                                //- Inserisce l'orario di riferimento della riga nel primo td
                                td(style="padding: 2px; text-align: center") 
                                    h6 #{(String(min_ap+h).length == 1)? '0'+(min_ap+h):(min_ap+h)}:00
                                //- Inserisce i dati opportuni a seconda dei casi nei 7 td dei giorni della settimana
                                each d_number in [0,1,2,3,4,5,6]
                                        //- Controlla se è chiuso
                                        - var current_wd_control = days[it_days[(new Date((new Date()).setDate(today.getDate()+d_number))).getDay()]]
                                        if current_wd_control[0] == "Chiuso" || (((min_ap+h) < current_wd_control[1]) || ((min_ap+h) >= current_wd_control[2]))
                                            td(style="padding: 2px; text-align: center") Chiuso
                                            //- td #{row_seat_ids[d_number]}
                                        //- Se ormai è un orario oltrepassato e quindi non più prenotabile
                                        else if row_seat_ids[d_number] == -1
                                            td(style="padding: 2px; text-align: center") Scaduto
                                            //- td #{row_seat_ids[d_number]}
                                        //- Se l'utente corrente ha gia prenotato questo orario
                                        else if reserved_seats[d_number] == 1
                                            td(style="padding: 2px; text-align: center") Prenotato
                                            //- td #{row_seat_ids[d_number]}
                                        //- Se l'orario corrente è gia stato prenotato in un altro spazio
                                        else if reserved_wd[d_number] == 1
                                            td(style="padding: 2px; text-align: center") Non disponibile
                                            //- td #{row_seat_ids[d_number]}
                                        //- Se i posti in quell'orario sono al completo
                                        else if free_seats_day[d_number] == 0
                                            td(style="padding: 2px; text-align: center") Completo
                                            //- td #{row_seat_ids[d_number]}
                                        //- Se non ci troviamo in nessuno dei casi precedenti scrive il numero di posti disponibili e Mostra lo switch per prenotare
                                        else
                                            td(style="padding: 2px; text-align: center") CB(#{free_seats_day[d_number]})
                                            //- td #{row_seat_ids[d_number]}
                                            //- <div class="form-check ms-auto me-auto mx-1 my-1 px-0" style="width:fit-content">
                                            //-         form.check_box((row_seat_ids[d_number].to_s), { class: "form-check-input mx-0 px-0", type: "checkbox" }, checked_value = "MakeRes", unchecked_value = "0") %>
                                            //-     <label class="h6 my-0 mx-1" for=" row_seat_ids[d_number] %>"> <%= free_seats_day[d_number] %> </label>
                                            //- </div>
                                        - d_number++
                            - h++

//- Raccoglie i posti dello spazio corrente
    <!-- Se non ci troviamo in nessuno dei casi precedenti scrive il numero di posti disponibili e Mostra lo switch per prenotare -->
    <% else %>
        <div class="form-check ms-auto me-auto mx-1 my-1 px-0" style="width:fit-content">
            <%= form.check_box((row_seat_ids[d_number].to_s), { class: "form-check-input mx-0 px-0", type: "checkbox" }, checked_value = "MakeRes", unchecked_value = "0") %>
            <label class="h6 my-0 mx-1" for="<%= row_seat_ids[d_number] %>"> <%= free_seats_day[d_number] %> </label>
        </div>
    <% end %>