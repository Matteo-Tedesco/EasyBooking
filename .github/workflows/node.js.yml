# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Node.js CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
    
env:
  COUCHDB_USER: ${{ secrets.COUCHDB_USER }}
  COUCHDB_PASSWORD: ${{ secrets.COUCHDB_PASSWORD }}
  SESS_NAME: ${{ secrets.SESS_NAME }}
  SESSION_SECRET: ${{ secrets.SESSION_SECRET }}
  GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
  GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
  AMQP_URL: ${{ secrets.AMQP_URL }}
  APP_EMAIL: ${{ secrets.APP_EMAIL }}
  APP_EMAIL_PASS: ${{ secrets.APP_EMAIL_PASS }}
  BASE_64_CERT_KEY: ${{ secrets.BASE_64_CERT_KEY }}
  CERT_DHPARAM: ${{ secrets.CERT_DHPARAM }}
  CERT_NGINX: ${{ secrets.CERT_NGINX }}
  
jobs:
  deploy:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./app
    steps:
      - name: Setup and run test Node
        uses: actions/checkout@v3
      - uses: actions/setup-node@v3
      - name: npm installation
        run: npm install
      - name: create certs
        run: cd ../nginx && mkdir certs && cd certs && echo "$BASE_64_CERT_KEY" > nginx.key && echo "$CERT_DHPARAM" > dhparam.pem && echo "$CERT_NGINX" > nginx.crt && pwd && ls
      - name: docker compose up
        run: cd .. && docker-compose up -d --build
      - name: Wait containers start up
        uses: jakejarvis/wait-action@master
        with:
          time: '30s'
      - name: docker ps
        run: docker ps -a
      - name: test connection nginx
        run: curl -k https://localhost:8083 && curl http://localhost:5984 && curl http://localhost:15672
      - name: docker-compose down
        run: cd .. && docker-compose down
